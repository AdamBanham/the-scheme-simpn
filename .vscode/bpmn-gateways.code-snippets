{
	// Place your simBPMN workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"bpmn-xor-split simpn" : {
		"scope": "python",
		"prefix": "xor split",
		"body": [
			"class $1XorSplit(BPMN):",
			"	type=\"gat-ex-split\"",
			"	model=problem",
			"	name=\"$2\"",
			"	incoming=[\"$3\"]",
			"	outgoing=[$4]",
			"",
			"	def choice(c):",
			"		c = increment_priority(c)",
			"		pick = uniform(0,100)",
			"		if pick <= ${5:80}:",
			"			return [SimToken(c), None]",
			"		else:",
			"			return [None, SimToken(c)]",
			"",
			""

		],
		"description": "Creates an XOR split"
	},
	"bpmn-xor-join simpn" : {
		"scope": "python",
		"prefix": "xor join",
		"body": [
			"class $1XorJoin(BPMN):",
			"	type=\"gat-ex-join\"",
			"	model=problem",
			"	name=\"$2\"",
			"	incoming=[$3]",
			"	outgoing=[\"$4\"]",
			"",
			"",
		],
		"description": "Creates an XOR split"
	}
}